#include "../../include/http_calls.h"
#include <windows.h>
using namespace std;

class Shell {
private:
    const char* url;
    size_t writeCallback(void* ptr, size_t size, size_t nmemb, std::string* data) {
        data->append((char*)ptr, size * nmemb);
        return size * nmemb;
    }
    void requestEndpoint(const char *url, void *requestCallback) {
        CURL *curl;
        CURLcode res;
        std::string readBuffer;
        curl = curl_easy_init();
        if (curl) {
            curl_easy_setopt(curl, CURLOPT_URL, url);
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, this->writeCallback);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
            res = curl_easy_perform(curl);
            if (res != CURLE_OK){
                std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            }
            else {
                requestCallback();
                std::cout << "Response from " << url << ": " << readBuffer << std::endl;
            }
            curl_easy_cleanup(curl);
            readBuffer.clear();
        }
    }
    void blockMouse(){
        HHOOK mouseHook = SetWindowsHookEx(WH_MOUSE_LL, MouseProc, NULL, 0);
        if (mouseHook == NULL) {
            std::cerr << "Failed to install mouse hook." << std::endl;
            return;
        }
        std::cout << "Mouse input blocked In 5 seconds it will be unblocked." << std::endl;
        Sleep(5000);
        UnhookWindowsHookEx(mouseHook);
        std::cout << "Mouse input unblocked." << std::endl;
    }

    LRESULT CALLBACK MouseProc(int nCode, WPARAM wParam, LPARAM lParam) {
        if (nCode >= 0 && (wParam == WM_MOUSEMOVE || wParam == WM_LBUTTONDOWN || wParam == WM_RBUTTONDOWN)) {
            // Block mouse input
            return 1;
        }
        // Call the next hook in the hook chain
        return CallNextHookEx(mouseHook, nCode, wParam, lParam);
    }

public:
    Shell(const char* apiUrl) {
        this->url = apiUrl;
    }

    void checkMouseBlockRequestsAndExecuteIfNecessary(){
        const char* endpoint = "/block-mouse";
        const char* requestCompleteEndpoint = this->url + endpoint;
        this->requestEndpoint(this->url, this->blockMouse);
    }
};