#include "../include/usb_detection.h"
#include <iostream>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    if (uMsg == WM_DEVICECHANGE) {
        if (wParam == DBT_DEVICEARRIVAL) {
            PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;
            if (lpdb->dbch_devicetype == DBT_DEVTYP_VOLUME) {
                PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;
                char driveLetter = 0;
                for (char i = 0; i < 26; i++) {
                    if (lpdbv->dbcv_unitmask & (1 << i)) {
                        driveLetter = 'A' + i;
                        break;
                    }
                }
                if (driveLetter != 0) {
                    std::string drivePath = std::string(1, driveLetter) + ":\\";
                    if (GetDriveTypeA(drivePath.c_str()) == DRIVE_REMOVABLE) {
                        std::cout << "Removable drive inserted: " << drivePath << std::endl;
                        copyFileToUSB(drivePath);


                    }
                }
            }
        }
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

void copyFileToUSB(const std::string& drive) {
    std::string sourcePath = fs::current_path().string() + "\\hello.txt";
    std::string destinationPath = drive + "\\hello.txt";

    // Check if source file exists
    if (fs::exists(sourcePath)) {
        try {
            fs::copy_file(sourcePath, destinationPath, fs::copy_options::overwrite_existing);
            std::cout << "Copied hello.txt to " << drive << std::endl;
        }
        catch (const fs::filesystem_error& e) {
            std::cerr << "Error copying file: " << e.what() << std::endl;
        }
    }
    else {
        std::cerr << "Source file hello.txt not found." << std::endl;
    }
}

void usbDetectionThread() {
    const char CLASS_NAME[] = "USB Detection Window Class";

    WNDCLASS wc = { };
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = GetModuleHandle(NULL);
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    HWND hwnd = CreateWindowEx(
        0, CLASS_NAME, "USB Detection Window", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
        NULL, NULL, GetModuleHandle(NULL), NULL
    );

    if (hwnd == NULL) {
        return;
    }

    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
}